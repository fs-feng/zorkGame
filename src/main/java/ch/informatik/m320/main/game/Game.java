package ch.informatik.m320.main.game;import ch.informatik.m320.main.entities.Enemy;import ch.informatik.m320.main.entities.Player;import ch.informatik.m320.main.items.*;import ch.informatik.m320.main.rooms.Room;import ch.informatik.m320.main.utils.WinChecker;import java.util.ArrayList;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game {		private Parser parser;	private Room sleepingquarters, gun1, gun2, reactor, mensa, cockpit, supplyroom, engine1, engine2, escapepod;	private Player player;	private Enemy enemy;	private Printer printer;	private WinChecker winChecker;	public Game() {		setupRooms();		player = new Player(cockpit); // start game in cockpit		enemy = new Enemy(player, engine2);		setupItems();		parser = new Parser(System.in);		printer = new Printer(player, enemy, parser, getRoomArray());		winChecker = WinChecker.getInstance();	}	/**	 *  Main play routine.  Loops until end of play.	 */	public void play() {		printer.printWelcome();		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);		}		System.out.println("Thank you for playing.  Good bye.");	}	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		if (commandWord.equals("help")) {			printer.printHelp();		} else if (commandWord.equals("go")) {			if (enemy.isAlive()) {				enemy.attack();				enemy.goRoom();			}			if (player.isAlive()) {				player.goRoom(command);				player.kill();			}		} else if (commandWord.equals("back")) {			player.goBack();		} else if (commandWord.equals("map")) {			printer.printMap();		} else if (commandWord.equals("pick")) {			player.pickItem(command);		} else if (commandWord.equals("drop")) {			player.dropItem(command);		} else if (commandWord.equals("inventory")) {			player.showInventory();		} else if (commandWord.equals("use")) {			player.useItem(command, enemy);		} else if (commandWord.equals("escape")) {			if (winChecker.checkWin() && player.getCurrentRoom() == escapepod) {				System.out.println("Congratulation");				return true;			} else if (winChecker.checkWin() && player.getCurrentRoom() != escapepod) {				System.out.println("You cannot escape from this room.");			} else {				System.out.println("The escapepod hasn't been fixed yet.");			}		}			if (commandWord.equals("quit")) {			if (command.hasSecondWord()) {				System.out.println("Quit what?");			} else {				return true; // signal that we want to quit			}		}		if (player.isAlive())			return false;		else			return true;	}	private void setupRooms() {		sleepingquarters = new Room("Sleeping Quarters");		gun1= new Room("gun2");		gun2 = new Room("gun1");		reactor = new Room("reactor");		mensa = new Room("mensa");		cockpit = new Room("cockpit");		supplyroom = new Room("Supply Room");		engine1 = new Room("Engine Room 1");		engine2 = new Room("Engine Room 2");		escapepod = new Room("Escape Pod");		sleepingquarters.setExits(reactor, engine2, escapepod, gun2);		gun1.setExits(engine1, null, engine2, null);		gun2.setExits(null, sleepingquarters, null, null);		reactor.setExits(mensa, null, sleepingquarters, null);		mensa.setExits(supplyroom, engine1, reactor, cockpit);		cockpit.setExits(null, mensa, null, null);		supplyroom.setExits(null, null, mensa, null);		engine1.setExits(null, null, gun1, mensa);		engine2.setExits(gun1, null, null, sleepingquarters);		escapepod.setExits(sleepingquarters, null, null, null);    }	private void setupItems() {		sleepingquarters.getInventory().addItem(new PodKey());		supplyroom.getInventory().addItem(new PowerCable());		supplyroom.getInventory().addItem(new MedKit());		mensa.getInventory().addItem(new Ration());		gun1.getInventory().addItem(new StunGun(enemy));		gun1.getInventory().addItem(new StunGun(enemy));		cockpit.getInventory().addItem(new StunGun(enemy));		gun2.getInventory().addItem(new StunGun(enemy));		engine2.getInventory().addItem(new StunGun(enemy));		sleepingquarters.getInventory().addItem(new StunGun(enemy));		gun2.getInventory().addItem(new NavModule());		reactor.getInventory().addItem(new EngineCore());	}	private Room[][] getRoomArray() {		return new Room[][] {				{null, supplyroom, null},				{cockpit, mensa, engine1},				{null, reactor, gun1},				{gun2, sleepingquarters, engine2},				{null, escapepod, null}		};	}}